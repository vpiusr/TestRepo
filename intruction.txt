My work on test is done and I am ready to merge it back to master. Here are the two ways I can think of:

A:

git checkout test
git pull origin master
git push origin test
git checkout master
git pull origin test 
B:

git checkout test
git pull origin master
git checkout master
git merge test
I am not using --rebase because from my understanding, rebase will get the changes from master and stack mine on top of that hence it could overwrite changes other people made.

Question 2: Which one of these two methods is right? What is the difference there?

The goal in all of this is to keep my test branch updated with the things happening in master and later I could merge them back into master hoping to keep the timeline as linear as possible.
------------------------------------
How I would do this

git checkout master
git pull origin master
git merge test
git push origin master
If I have a local branch from a remote one, I don't feel comfortable with merging other branches than this one with the remote. Also I would not push my changes, until I'm happy with what I want to push and also I wouldn't push things at all, that are only for me and my local repository. In your description it seems, that test is only for you? So no reason to publish it.
------------------------------------------
Instructions from Varun Pius Rodrigues:
Create a new branch right in the beginning whenever you start without pulling.
next, add, commit and push the changes.
Steps are as follows:
git add .    | or you can try this and see | git add --all
next:
git commit -m "commit message"

then comes the part to add remote repo:
first create branch:
git checkout -b branchname
git branch
git remote add origin https://github_link.com_ofRepo
git push -u origin branchname

Then:
git checkout master
git pull origin master
// preceding step will grab the data from origin to master; origin being remote git
git merge branchname
git push origin master

next go to github and delete the branch.
